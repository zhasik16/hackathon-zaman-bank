"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import {
  User,
  DollarSign,
  Target,
  TrendingUp,
  Heart,
  Home,
  GraduationCap,
  Plane,
} from "lucide-react";

export default function OnboardingPage() {
  const router = useRouter();
  const [step, setStep] = useState(1);
  const [userData, setUserData] = useState({
    // –®–∞–≥ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    fullName: "",
    age: "",
    monthlyIncome: "",
    monthlyExpenses: "",

    // –®–∞–≥ 2: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏
    goals: [] as Array<{
      name: string;
      targetAmount: string;
      timeline: string;
      category: string;
    }>,

    // –®–∞–≥ 3: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
    riskProfile: "moderate",
    islamicKnowledge: "beginner",
    financialValues: [] as string[],
  });

  const handleNext = () => {
    if (step < 4) {
      setStep(step + 1);
    } else {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      localStorage.setItem("userProfile", JSON.stringify(userData));
      router.push("/chat");
    }
  };

  const handleBack = () => {
    if (step > 1) {
      setStep(step - 1);
    }
  };

  const addGoal = () => {
    setUserData((prev) => ({
      ...prev,
      goals: [
        ...prev.goals,
        { name: "", targetAmount: "", timeline: "", category: "other" },
      ],
    }));
  };

  const updateGoal = (index: number, field: string, value: string) => {
    setUserData((prev) => ({
      ...prev,
      goals: prev.goals.map((goal, i) =>
        i === index ? { ...goal, [field]: value } : goal
      ),
    }));
  };

  // –®–∞–≥ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  const renderStep1 = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-dark text-center">
        –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!
      </h2>

      <div className="space-y-4">
        <div>
          <label className="form-label text-dark">–í–∞—à–µ –∏–º—è</label>
          <input
            type="text"
            value={userData.fullName}
            onChange={(e) =>
              setUserData((prev) => ({ ...prev, fullName: e.target.value }))
            }
            className="input-field"
            placeholder="–ê—Å–∞–Ω –ê–ª–∏–µ–≤"
          />
        </div>

        <div>
          <label className="form-label text-dark">–í–æ–∑—Ä–∞—Å—Ç</label>
          <input
            type="number"
            value={userData.age}
            onChange={(e) =>
              setUserData((prev) => ({ ...prev, age: e.target.value }))
            }
            className="input-field"
            placeholder="28"
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="form-label text-dark">
              –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ (‚Ç∏)
            </label>
            <input
              type="number"
              value={userData.monthlyIncome}
              onChange={(e) =>
                setUserData((prev) => ({
                  ...prev,
                  monthlyIncome: e.target.value,
                }))
              }
              className="input-field"
              placeholder="300000"
            />
          </div>

          <div>
            <label className="form-label text-dark">
              –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (‚Ç∏)
            </label>
            <input
              type="number"
              value={userData.monthlyExpenses}
              onChange={(e) =>
                setUserData((prev) => ({
                  ...prev,
                  monthlyExpenses: e.target.value,
                }))
              }
              className="input-field"
              placeholder="200000"
            />
          </div>
        </div>
      </div>
    </div>
  );

  // –®–∞–≥ 2: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏
  // –®–∞–≥ 2: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏
  const renderStep2 = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-white text-center">
        –í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏
      </h2>
      <p className="text-white/80 text-center">–ß—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—Å –≤ –∂–∏–∑–Ω–∏?</p>

      <div className="space-y-4">
        {userData.goals.map((goal, index) => (
          <div key={index} className="financial-card p-4 relative">
            {" "}
            {/* –î–æ–±–∞–≤–∏–ª–∏ relative */}
            {/* üî• –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–£ –£–î–ê–õ–ï–ù–ò–Ø */}
            <button
              onClick={() => {
                setUserData((prev) => ({
                  ...prev,
                  goals: prev.goals.filter((_, i) => i !== index),
                }));
              }}
              className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center text-xs hover:bg-red-600 transition-all"
              type="button"
            >
              √ó
            </button>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label className="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏</label>
                <input
                  type="text"
                  value={goal.name}
                  onChange={(e) => updateGoal(index, "name", e.target.value)}
                  className="input-field"
                  placeholder="–ü–æ–∫—É–ø–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –•–∞–¥–∂, –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ..."
                />
              </div>

              <div>
                <label className="form-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                <select
                  value={goal.category}
                  onChange={(e) =>
                    updateGoal(index, "category", e.target.value)
                  }
                  className="input-field"
                >
                  <option value="housing">–ñ–∏–ª—å–µ</option>
                  <option value="hajj">–•–∞–¥–∂</option>
                  <option value="education">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</option>
                  <option value="marriage">–°–≤–∞–¥—å–±–∞</option>
                  <option value="business">–ë–∏–∑–Ω–µ—Å</option>
                  <option value="other">–î—Ä—É–≥–æ–µ</option>
                </select>
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="form-label">–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ (‚Ç∏)</label>
                <input
                  type="number"
                  value={goal.targetAmount}
                  onChange={(e) =>
                    updateGoal(index, "targetAmount", e.target.value)
                  }
                  className="input-field"
                  placeholder="5000000"
                />
              </div>

              <div>
                <label className="form-label">–°—Ä–æ–∫ (–º–µ—Å—è—Ü–µ–≤)</label>
                <input
                  type="number"
                  value={goal.timeline}
                  onChange={(e) =>
                    updateGoal(index, "timeline", e.target.value)
                  }
                  className="input-field"
                  placeholder="60"
                />
              </div>
            </div>
          </div>
        ))}

        <button
          onClick={addGoal}
          className="w-full btn-secondary flex items-center justify-center gap-2"
        >
          <Target className="h-5 w-5" />
          –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å
        </button>
      </div>
    </div>
  );

  // –®–∞–≥ 3: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
  const renderStep3 = () => (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-dark text-center">
        –í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      </h2>

      <div className="space-y-6">
        <div>
          <label className="form-label text-dark">–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞</label>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-2">
            {["conservative", "moderate", "aggressive"].map((profile) => (
              <button
                key={profile}
                type="button"
                onClick={() =>
                  setUserData((prev) => ({ ...prev, riskProfile: profile }))
                }
                className={`p-4 rounded-xl border-2 transition-all ${
                  userData.riskProfile === profile
                    ? "border-blue-500 bg-blue-500/20 text-dark"
                    : "border-gray-300 bg-white/10 text-dark/80 hover:bg-white/20"
                }`}
              >
                <div className="text-center">
                  <TrendingUp className="h-8 w-8 mx-auto mb-2" />
                  <span className="font-medium capitalize">
                    {profile === "conservative"
                      ? "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π"
                      : profile === "moderate"
                      ? "–£–º–µ—Ä–µ–Ω–Ω—ã–π"
                      : "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π"}
                  </span>
                </div>
              </button>
            ))}
          </div>
        </div>

        <div>
          <label className="form-label text-dark">
            –ó–Ω–∞–Ω–∏—è –∏—Å–ª–∞–º—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤
          </label>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-2">
            {["beginner", "intermediate", "advanced"].map((level) => (
              <button
                key={level}
                type="button"
                onClick={() =>
                  setUserData((prev) => ({ ...prev, islamicKnowledge: level }))
                }
                className={`p-4 rounded-xl border-2 transition-all ${
                  userData.islamicKnowledge === level
                    ? "border-green-500 bg-green-500/20 text-dark"
                    : "border-gray-300 bg-white/10 text-dark  /80 hover:bg-white/20"
                }`}
              >
                <div className="text-center">
                  <Heart className="h-8 w-8 mx-auto mb-2" />
                  <span className="font-medium capitalize">
                    {level === "beginner"
                      ? "–ù–∞—á–∏–Ω–∞—é—â–∏–π"
                      : level === "intermediate"
                      ? "–°—Ä–µ–¥–Ω–∏–π"
                      : "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"}
                  </span>
                </div>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  // –®–∞–≥ 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
  const renderStep4 = () => (
    <div className="space-y-6 text-center">
      <h2 className="text-2xl font-bold text-white">–ì–æ—Ç–æ–≤–æ! üéâ</h2>

      <div className="financial-card p-6">
        <div className="space-y-4">
          <div className="flex items-center justify-center gap-3 text-green-600">
            <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
              <User className="h-6 w-6" />
            </div>
            <span className="text-lg font-semibold">–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω</span>
          </div>

          <div className="space-y-2 text-gray-600">
            <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</p>
            <ul className="space-y-1 text-left">
              <li>‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã</li>
              <li>‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–µ–π</li>
              <li>‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –∏—Å–ª–∞–º–∞</li>
              <li>‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —à–∞—Ä–∏–∞—Ç–æ–º</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );

  const steps = [renderStep1, renderStep2, renderStep3, renderStep4];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-blue-800 flex items-center justify-center p-4">
      <div className="max-w-2xl w-full">
        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
        <div className="glass-effect rounded-2xl p-6 mb-8">
          <div className="flex justify-between items-center mb-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
                <span className="text-white font-bold">{step}</span>
              </div>
              <div>
                <h1 className="text-white font-bold text-xl">Zaman Bank</h1>
                <p className="text-white/70 text-sm">–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</p>
              </div>
            </div>

            <div className="text-white/70">–®–∞–≥ {step} –∏–∑ 4</div>
          </div>

          <div className="w-full bg-white/20 rounded-full h-2">
            <div
              className="bg-green-500 h-2 rounded-full transition-all duration-500"
              style={{ width: `${(step / 4) * 100}%` }}
            />
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —à–∞–≥–∞ */}
        <div className="financial-card p-6 mb-6">{steps[step - 1]()}</div>

        {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        <div className="flex justify-between">
          <button
            onClick={handleBack}
            disabled={step === 1}
            className="btn-secondary disabled:opacity-50 disabled:cursor-not-allowed"
          >
            –ù–∞–∑–∞–¥
          </button>

          <button onClick={handleNext} className="btn-islamic">
            {step === 4 ? "–ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ" : "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"}
          </button>
        </div>
      </div>
    </div>
  );
}
